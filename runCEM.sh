#/bin/bash

# this scripts launches the capacity investment CEM
# depending on the options, it may also launch a loop SSV/CEM for updating Bellman values each X CEM iterations
# it may also lauch multiple runs of CEM (or of the loop CEM/SSV) for different lists of scenarios
# if needed it uses BellmanVauesOUT.csv or cuts.txt generated by SSV, which have to be present in ${INSTANCE}/

source ${INCLUDE}/sh_utils.sh

remove_previous_simulation_results "invest"
index_scen=0
# if there is a config file with lists of scenarios to use, gets all lists in variable Scenario_$i
if [ ! "$cem_config_file" = "" ]; then
	NB=$( head -n 1 ${CONFIG}/${cem_config_file} | tr -d '[:space:]' )
	
	if [[ "$NB" =~ ^-?[0-9]+$ ]]; then
    	echo -e "\n${print_blue}    - There are $NB lists of scenarios in ${CONFIG}/${cem_config_file}:"
		for (( i=1; i<=$NB; i++ )); do
			line=$(sed -n "$((i+1))p" ${CONFIG}/$cem_config_file)
			eval "Scenario_$i='$line'"
			eval "echo i=$i, \${Scenario_$i}"
		done	
		echo -e "${no_color}"
	else
    	echo -e "\n${print_orange}    - ${CONFIG}/${cem_config_file} is not a correct configuration file for scenarios lists; CEM will be ran with the number of scenarios in settings_format_invest.yml ${no_color}"
		cem_config_file = ""
	fi
fi

if [ "$HOTSTART" = "" ]; then
	if [ "$LOOPCEM" != "" ]; then
 		echo -e "\n${print_blue} - remove all previous results of SSV in optim/invest ${no_color}"
		remove_previous_ssv_results "optim"
		remove_previous_ssv_results "invest"
	fi
 	echo -e "\n${print_blue} - remove all previous results of CEM and SIM ${no_color}"
	remove_all_investment_results
	clean_csv "invest"
	clean_csv "simul"
fi

if [ "$cem_config_file" = "" ]; then
	if [ "$LOOPCEM" == "LOOPCEM" ]; then   # if option -L is used, use camloopssv
		# run investment solver with cem/ssv loop
		echo -e "\n${print_blue} - run CEM with update of BellmanValues ${no_color}"
		source ${INCLUDE}/cemloopssv.sh
	else
		# run investment solver with cem
		echo -e "\n${print_blue} - run CEM without update of BellmanValues ${no_color}"
		
		if [[ -z "$NumberOfCemIterations" ]]; then
			replace_param "${CONFIG}/BSPar-Investment.txt" "intMaxIter" "50"
			echo -e "${print_blue}    - BSPar-Investment.txt config file : replaced value of intMaxIter by 50.${no_color}"	
		else		
			replace_param "${CONFIG}/BSPar-Investment.txt" "intMaxIter" "$NumberOfCemIterations"
			echo -e "${print_blue}    - BSPar-Investment.txt config file : replaced value of intMaxIter by $NumberOfCemIterations.${no_color}"
		fi		

		source ${INCLUDE}/cem.sh
		wait
		investment_status
		test=$?
		if [ $test -eq 1 ]; then return 1; fi	

		invest_output="$INVEST_OUTPUT"
		echo "$invest_output"
	fi
else
	# if there is a config file with lists of scenarios to use, run investment in sequence on all lists
	for ((it_scen=1; it_scen<=$NB; it_scen++)); do
		echo -e "\n${print_blue} - run CEM for scenarios list $it_scen : "
		eval "echo \${Scenario_$it_scen}"
		echo -e "${no_color}"
		
		# update settings_format_invest with scenarios in Scenario_$it_scen
		eval "update_scenarios \"${CONFIG}\"/settings_format_invest.yml \"\${Scenario_$it_scen}\""
		rowsettings=$(awk -F ':' '$1=="    Scenarios"' ${CONFIG}/settings_format_invest.yml)
		StrNbCommas=$(grep -o "," <<< "$rowsettings" | wc -l)
		let "NbCommas=$StrNbCommas"
		NBSCEN_CEM=`expr $NbCommas + 1`
		echo -e "\n${print_blue} - with $NBSCEN_CEM scenarios ${no_color}"

  		if [ $it_scen -gt 1 ]; then
			# run in hotstart
			if [ $HOTSTART="" ]; then HOTSTART="HOTSTART" ; fi
		fi
  
		if [ "$LOOPCEM" = "LOOPCEM" ]; then
			index_scen=$it_scen
			# run investment solver with cem/ssv loop
			echo -e "\n${print_blue} - run CEM with update of BellmanValues ${no_color}"
			source ${INCLUDE}/cemloopssv.sh
			wait
		else
			# run investment solver with cem
			mode1="invest"
			mode2="invest"
			source ${INCLUDE}/format.sh
			wait
			format_status
			test=$?
			if [ $test -eq 1 ]; then return 1; fi

			echo -e "\n${print_blue} - run CEM without update of BellmanValues ${no_color}"			
			
			if [[ -z "$NumberOfCemIterations" ]]; then
				replace_param "${CONFIG}/BSPar-Investment.txt" "intMaxIter" "50"
				echo -e "${print_blue}    - BSPar-Investment.txt config file : replaced value of intMaxIter by 50.${no_color}"	
			else		
				replace_param "${CONFIG}/BSPar-Investment.txt" "intMaxIter" "$NumberOfCemIterations"
				echo -e "${print_blue}    - BSPar-Investment.txt config file : replaced value of intMaxIter by $NumberOfCemIterations.${no_color}"
			fi

			source ${INCLUDE}/cem.sh
			wait
			investment_status
			test=$?
			if [ $test -eq 1 ]; then return 1; fi	
			invest_output="$INVEST_OUTPUT"
		fi
	done
fi 


	
